*REMOVED*static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.implicit operator Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>
*REMOVED*static Microsoft.CodeAnalysis.SyntaxList<TNode>.implicit operator Microsoft.CodeAnalysis.SyntaxList<TNode!>(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode!>
Microsoft.CodeAnalysis.CommandLineArguments.ReportInternalsVisibleToAttributes.get -> bool
Microsoft.CodeAnalysis.Diagnostics.AdditionalTextValueProvider<TValue>
Microsoft.CodeAnalysis.Diagnostics.AdditionalTextValueProvider<TValue>.AdditionalTextValueProvider(System.Func<Microsoft.CodeAnalysis.AdditionalText!, TValue>! computeValue, System.Collections.Generic.IEqualityComparer<Microsoft.CodeAnalysis.AdditionalText!>? additionalTextComparer = null) -> void
Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.TryGetValue<TValue>(Microsoft.CodeAnalysis.AdditionalText! text, Microsoft.CodeAnalysis.Diagnostics.AdditionalTextValueProvider<TValue>! valueProvider, out TValue value) -> bool
Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree!
Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree!
Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.TryGetValue<TValue>(Microsoft.CodeAnalysis.AdditionalText! text, Microsoft.CodeAnalysis.Diagnostics.AdditionalTextValueProvider<TValue>! valueProvider, out TValue value) -> bool
Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.TryGetValue<TValue>(Microsoft.CodeAnalysis.AdditionalText! text, Microsoft.CodeAnalysis.Diagnostics.AdditionalTextValueProvider<TValue>! valueProvider, out TValue value) -> bool
Microsoft.CodeAnalysis.Diagnostics.AdditionalFileAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext<TLanguageKindEnum>.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalysisResultAsync(Microsoft.CodeAnalysis.AdditionalText! file, Microsoft.CodeAnalysis.Text.TextSpan? filterSpan, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer!> analyzers, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Diagnostics.AnalysisResult!>!
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalysisResultAsync(Microsoft.CodeAnalysis.AdditionalText! file, Microsoft.CodeAnalysis.Text.TextSpan? filterSpan, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Diagnostics.AnalysisResult!>!
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalysisResultAsync(Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Text.TextSpan? filterSpan, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer!> analyzers, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Diagnostics.AnalysisResult!>!
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalysisResultAsync(Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Text.TextSpan? filterSpan, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Diagnostics.AnalysisResult!>!
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerSyntaxDiagnosticsAsync(Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Text.TextSpan? filterSpan, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer!> analyzers, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic!>>!
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerSyntaxDiagnosticsAsync(Microsoft.CodeAnalysis.SyntaxTree! tree, Microsoft.CodeAnalysis.Text.TextSpan? filterSpan, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic!>>!
Microsoft.CodeAnalysis.IAliasSymbol.Arity.get -> int
Microsoft.CodeAnalysis.IAliasSymbol.Construct(params Microsoft.CodeAnalysis.ITypeSymbol![]! typeArguments) -> Microsoft.CodeAnalysis.INamedTypeSymbol!
Microsoft.CodeAnalysis.IAliasSymbol.Construct(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol!> typeArguments, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.NullableAnnotation> typeArgumentNullableAnnotations) -> Microsoft.CodeAnalysis.INamedTypeSymbol!
Microsoft.CodeAnalysis.IAliasSymbol.GetTypeArgumentCustomModifiers(int ordinal) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CustomModifier!>
Microsoft.CodeAnalysis.IAliasSymbol.IsGenericAlias.get -> bool
Microsoft.CodeAnalysis.IAliasSymbol.IsUnboundGenericAlias.get -> bool
Microsoft.CodeAnalysis.IAliasSymbol.TypeArgumentNullableAnnotations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.NullableAnnotation>
Microsoft.CodeAnalysis.IAliasSymbol.TypeArguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol!>
Microsoft.CodeAnalysis.IAliasSymbol.TypeParameters.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeParameterSymbol!>
Microsoft.CodeAnalysis.ITypeParameterSymbol.DeclaringAlias.get -> Microsoft.CodeAnalysis.IAliasSymbol?
Microsoft.CodeAnalysis.NameWithArity
Microsoft.CodeAnalysis.NameWithArity.HasArity.get -> bool
Microsoft.CodeAnalysis.NameWithArity.IsDefault.get -> bool
Microsoft.CodeAnalysis.NameWithArity.NameWithArity() -> void
Microsoft.CodeAnalysis.NameWithArity.NameWithArity(string! name, int arity) -> void
Microsoft.CodeAnalysis.NameWithArityComparer
Microsoft.CodeAnalysis.NameWithArityComparer.Compare(Microsoft.CodeAnalysis.NameWithArity x, Microsoft.CodeAnalysis.NameWithArity y) -> int
Microsoft.CodeAnalysis.NameWithArityComparer.Equals(Microsoft.CodeAnalysis.NameWithArity x, Microsoft.CodeAnalysis.NameWithArity y) -> bool
Microsoft.CodeAnalysis.NameWithArityComparer.GetHashCode(Microsoft.CodeAnalysis.NameWithArity obj) -> int
Microsoft.CodeAnalysis.NameWithArityComparer.NameWithArityComparer(System.StringComparer! nameComparer) -> void
Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree!
Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree!
Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree!
Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree!
Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree?
Microsoft.CodeAnalysis.Diagnostics.SymbolStartAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.SymbolStartAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree?
Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.FilterTree.get -> Microsoft.CodeAnalysis.SyntaxTree!
Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.FilterSpan.get -> Microsoft.CodeAnalysis.Text.TextSpan?
static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.explicit operator Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>
static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.op_Implicit(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>
static Microsoft.CodeAnalysis.SyntaxList<TNode>.explicit operator Microsoft.CodeAnalysis.Symbols.AliasKeyComparer
Microsoft.CodeAnalysis.Symbols.AliasKeyComparer.AliasKeyComparer(System.Collections.Generic.IComparer<string!>! nameComparer) -> void
Microsoft.CodeAnalysis.Symbols.AliasKeyComparer.Compare(Microsoft.CodeAnalysis.NameWithArity x, Microsoft.CodeAnalysis.NameWithArity y) -> int
Microsoft.CodeAnalysis.SyntaxList<TNode!>(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode!>
Microsoft.CodeAnalysis.TypeParameterKind.Alias = 3 -> Microsoft.CodeAnalysis.TypeParameterKind
override Microsoft.CodeAnalysis.NameWithArity.GetHashCode() -> int
override Microsoft.CodeAnalysis.NameWithArity.ToString() -> string!
readonly Microsoft.CodeAnalysis.NameWithArity.Arity -> int
readonly Microsoft.CodeAnalysis.NameWithArity.Name -> string!
static Microsoft.CodeAnalysis.SyntaxList<TNode>.op_Implicit(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode!>
Microsoft.CodeAnalysis.OperationKind.InlineArrayAccess = 126 -> Microsoft.CodeAnalysis.OperationKind
Microsoft.CodeAnalysis.Operations.IInlineArrayAccessOperation
Microsoft.CodeAnalysis.Operations.IInlineArrayAccessOperation.Argument.get -> Microsoft.CodeAnalysis.IOperation!
Microsoft.CodeAnalysis.Operations.IInlineArrayAccessOperation.Instance.get -> Microsoft.CodeAnalysis.IOperation!
Microsoft.CodeAnalysis.RuntimeCapability.InlineArrayTypes = 7 -> Microsoft.CodeAnalysis.RuntimeCapability
*REMOVED*Microsoft.CodeAnalysis.SpecialType.Count = 45 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.Count = 46 -> Microsoft.CodeAnalysis.SpecialType
Microsoft.CodeAnalysis.SpecialType.System_Runtime_CompilerServices_InlineArrayAttribute = 46 -> Microsoft.CodeAnalysis.SpecialType
static Microsoft.CodeAnalysis.NameWithArity.implicit operator Microsoft.CodeAnalysis.NameWithArity(string? name) -> Microsoft.CodeAnalysis.NameWithArity
static Microsoft.CodeAnalysis.NameWithArityComparer.Default.get -> Microsoft.CodeAnalysis.NameWithArityComparer!
static Microsoft.CodeAnalysis.NameWithArityComparer.IgnoreCase.get -> Microsoft.CodeAnalysis.NameWithArityComparer!
static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.explicit operator Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>
static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.op_Implicit(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>
static Microsoft.CodeAnalysis.Symbols.AliasKeyComparer.Default -> Microsoft.CodeAnalysis.Symbols.AliasKeyComparer!
static Microsoft.CodeAnalysis.Symbols.AliasKeyComparer.IgnoreCase -> Microsoft.CodeAnalysis.Symbols.AliasKeyComparer!
static Microsoft.CodeAnalysis.SyntaxList<TNode>.explicit operator Microsoft.CodeAnalysis.SyntaxList<TNode!>(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode!>
static Microsoft.CodeAnalysis.SyntaxList<TNode>.op_Implicit(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode!>
virtual Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitInlineArrayAccess(Microsoft.CodeAnalysis.Operations.IInlineArrayAccessOperation! operation) -> void
virtual Microsoft.CodeAnalysis.Operations.OperationVisitor<TArgument, TResult>.VisitInlineArrayAccess(Microsoft.CodeAnalysis.Operations.IInlineArrayAccessOperation! operation, TArgument argument) -> TResult?
