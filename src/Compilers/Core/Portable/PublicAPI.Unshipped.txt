*REMOVED*static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.implicit operator Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>
*REMOVED*static Microsoft.CodeAnalysis.SyntaxList<TNode>.implicit operator Microsoft.CodeAnalysis.SyntaxList<TNode!>(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode!>
*REMOVED*Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAllDiagnosticsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic!>>!
*REMOVED*Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic!>>!
*REMOVED*static Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.WithAnalyzers(this Microsoft.CodeAnalysis.Compilation! compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer!> analyzers, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers!
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.CompilationWithAnalyzers(Microsoft.CodeAnalysis.Compilation! compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer!> analyzers, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? options) -> void
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAllDiagnosticsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic!>>!
Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic!>>!
static Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.WithAnalyzers(this Microsoft.CodeAnalysis.Compilation! compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer!> analyzers, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? options = null) -> Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers!
static Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.WithAnalyzers(this Microsoft.CodeAnalysis.Compilation! compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer!> analyzers, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? options, System.Threading.CancellationToken cancellationToken) -> Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers!
Microsoft.CodeAnalysis.RefKind.RefReadOnlyParameter = 4 -> Microsoft.CodeAnalysis.RefKind
virtual Microsoft.CodeAnalysis.SyntaxContextReceiverCreator.Invoke() -> Microsoft.CodeAnalysis.ISyntaxContextReceiver?
virtual Microsoft.CodeAnalysis.SyntaxReceiverCreator.Invoke() -> Microsoft.CodeAnalysis.ISyntaxReceiver!
Microsoft.CodeAnalysis.IAliasSymbol.Arity.get -> int
Microsoft.CodeAnalysis.IAliasSymbol.Construct(params Microsoft.CodeAnalysis.ITypeSymbol![]! typeArguments) -> Microsoft.CodeAnalysis.INamedTypeSymbol!
Microsoft.CodeAnalysis.IAliasSymbol.Construct(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol!> typeArguments, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.NullableAnnotation> typeArgumentNullableAnnotations) -> Microsoft.CodeAnalysis.INamedTypeSymbol!
Microsoft.CodeAnalysis.IAliasSymbol.GetTypeArgumentCustomModifiers(int ordinal) -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CustomModifier!>
Microsoft.CodeAnalysis.IAliasSymbol.IsGenericAlias.get -> bool
Microsoft.CodeAnalysis.IAliasSymbol.IsUnboundGenericAlias.get -> bool
Microsoft.CodeAnalysis.IAliasSymbol.TypeArgumentNullableAnnotations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.NullableAnnotation>
Microsoft.CodeAnalysis.IAliasSymbol.TypeArguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol!>
Microsoft.CodeAnalysis.IAliasSymbol.TypeParameters.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeParameterSymbol!>
Microsoft.CodeAnalysis.ITypeParameterSymbol.DeclaringAlias.get -> Microsoft.CodeAnalysis.IAliasSymbol?
Microsoft.CodeAnalysis.TypeParameterKind.Alias = 3 -> Microsoft.CodeAnalysis.TypeParameterKind
Microsoft.CodeAnalysis.NameWithArity
Microsoft.CodeAnalysis.NameWithArity.HasArity.get -> bool
Microsoft.CodeAnalysis.NameWithArity.IsDefault.get -> bool
Microsoft.CodeAnalysis.NameWithArity.NameWithArity() -> void
Microsoft.CodeAnalysis.NameWithArity.NameWithArity(string! name, int arity) -> void
override Microsoft.CodeAnalysis.NameWithArity.GetHashCode() -> int
override Microsoft.CodeAnalysis.NameWithArity.ToString() -> string!
readonly Microsoft.CodeAnalysis.NameWithArity.Arity -> int
readonly Microsoft.CodeAnalysis.NameWithArity.Name -> string!
Microsoft.CodeAnalysis.NameWithArityComparer
Microsoft.CodeAnalysis.NameWithArityComparer.Compare(Microsoft.CodeAnalysis.NameWithArity x, Microsoft.CodeAnalysis.NameWithArity y) -> int
Microsoft.CodeAnalysis.NameWithArityComparer.Equals(Microsoft.CodeAnalysis.NameWithArity x, Microsoft.CodeAnalysis.NameWithArity y) -> bool
Microsoft.CodeAnalysis.NameWithArityComparer.GetHashCode(Microsoft.CodeAnalysis.NameWithArity obj) -> int
Microsoft.CodeAnalysis.NameWithArityComparer.NameWithArityComparer(System.StringComparer! nameComparer) -> void
static Microsoft.CodeAnalysis.SyntaxList<TNode>.explicit operator Microsoft.CodeAnalysis.Symbols.AliasKeyComparer
Microsoft.CodeAnalysis.Symbols.AliasKeyComparer.AliasKeyComparer(System.Collections.Generic.IComparer<string!>! nameComparer) -> void
Microsoft.CodeAnalysis.Symbols.AliasKeyComparer.Compare(Microsoft.CodeAnalysis.NameWithArity x, Microsoft.CodeAnalysis.NameWithArity y) -> int
static Microsoft.CodeAnalysis.NameWithArity.implicit operator Microsoft.CodeAnalysis.NameWithArity(string? name) -> Microsoft.CodeAnalysis.NameWithArity
static Microsoft.CodeAnalysis.NameWithArityComparer.Default.get -> Microsoft.CodeAnalysis.NameWithArityComparer!
static Microsoft.CodeAnalysis.NameWithArityComparer.IgnoreCase.get -> Microsoft.CodeAnalysis.NameWithArityComparer!
static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.explicit operator Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>
static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode>.op_Implicit(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode!>
static Microsoft.CodeAnalysis.Symbols.AliasKeyComparer.Default -> Microsoft.CodeAnalysis.Symbols.AliasKeyComparer!
static Microsoft.CodeAnalysis.Symbols.AliasKeyComparer.IgnoreCase -> Microsoft.CodeAnalysis.Symbols.AliasKeyComparer!
static Microsoft.CodeAnalysis.SyntaxList<TNode>.explicit operator Microsoft.CodeAnalysis.SyntaxList<TNode!>(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode!>
static Microsoft.CodeAnalysis.SyntaxList<TNode>.op_Implicit(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.SyntaxNode!> nodes) -> Microsoft.CodeAnalysis.SyntaxList<TNode!>